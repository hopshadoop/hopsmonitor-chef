/* global _ */

'use strict';

function makeYarnAppInfo(){
    if(_.isUndefined(ARGS.app)) {
	throw new Error("app URL parameter required");
    }
    var date = new Date();
    date.setDate(date.getDate() - 3);
    var from = date;
    if(!_.isUndefined(ARGS.from)) {
	from = new Date(ARGS.from);
    }
    var now = true;
    var refresh = '5s';
    var to;
    if(!_.isUndefined(ARGS.to)) {
        to = new Date(ARGS.to);
	now = false;
	refresh='';
    } else {
	to = 'now';
    }
       var app = {
	   prefix:ARGS.app,
	   now: now,
	   from: from,
	   to: to,
	   refresh:refresh
    };
    return app;
}

//var app = makeYarnApplication();
var app = makeYarnAppInfo();

var prefixTemplateVar = {
  type: "custom",
  name: "prefix",
  options: [
    {
      text: app.prefix,
      value: app.prefix
    }
  ],
  allFormat: "glob",
  includeAll: true,
  current: {
    text: app.prefix,
    value: app.prefix
  },
};

var driverTemplateVar = {
  type: "custom",
  name: "driver",
  query: "",
  options: [
    { text: "driver", value: "driver" },
  ],
  current: { text: "driver", value: "driver" }
};

var executorRangeTemplateVar = {
  type: "custom",
  name: "executor",
  options: [
    {
      text: "1",
      value: "1"
    },
    {
      text: "2",
      value: "2"
    },
    {
      text: "*",
      value: "*"
    }
  ],
  includeAll: true,
  allFormat: "glob",
  current: {
    text: "1",
    value: "1"
  }
};

// Dashboard boilerplate.
var dashboard = {
  title: app.prefix,
  rows: [],
  style: "light",
  time: {
    from: app.from,
    to: app.to,
    now: app.now,
  },
  refresh: app.refresh,
  templating: {
    enable: true,
    list: [
      prefixTemplateVar,
      driverTemplateVar
    ]
  }
};

var activeTasks ={
    title: "Active tasks per executor (stacked)",
    type: "graphite",
          datasource: 'influxdb',
          span: 4,
          stack: true,
          steppedLine: true,
          legend: {show: false},
          targets:[
          {
              select:[[
                  {'type': 'field', 'params': ['threadpool_activeTasks']},
                  {'type': 'max', 'params': []},
              ]],
              tags: [
                  {'key':'appid','operator':'=~','value':'/^$prefix$/'},
                  {'key':'service','operator':'=~','value':'/[0-9]+/', 'condition':'AND'},
              ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
              alias:"$m"
          }]

};

var completeTasksPerExec ={
    title: "Completed tasks per executor (stacked)",
    type: "graphite",
          datasource: 'influxdb',
          span: 4,
          legend: {show: false},
          stack: true,
          targets:[
          {
              select:[[
                  {'type': 'field', 'params': ['threadpool_completeTasks']},
                  {'type': 'max', 'params': []},
              ]],
              tags: [
                  {'key':'appid','operator':'=~','value':'/^$prefix$/'},
                  {'key':'service','operator':'=~','value':'/[0-9]+/', 'condition':'AND'},
              ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
              alias:"$m"
          }]

};

var completeTasks ={
      title: "complete tasks per minute per executor",
      type: "graphite",
      datasource: 'influxdb',
      span: 4,
      legend: {show: false},
      targets:[
          {
          select:[[
              {'type': 'field', 'params': ['threadpool_completeTasks']},
              {'type': 'max', 'params': []},
              {'type': 'non_negative_derivative', 'params': ['1m']},
          ]],
          tags: [
              {'key':'appid','operator':'=~','value':'/^$prefix$/'},
              {'key':'service','operator':'=~','value':'/[0-9]+/', 'condition':'AND'},
          ],
          groupBy: [{type: 'time', params: ['1m']},{type: 'fill', params: ['null']}],
          measurement: 'spark',
          alias:"$m"
      }]
      };

var threadpool_row = {
  title: "threadpool",
  height: '300px',
  collapse: false,
  panels: [
      activeTasks,
      completeTasksPerExec,
      completeTasks
  ]
};

var executor_row={
    title: "Executor JVMs",
    height:"300px",
    panels:[]
}


function getIntParam(i, def) {
  if (_.isUndefined(i)) return def;
  return parseInt(i);
}

var maxExecutorId = getIntParam(ARGS.maxExecutorId, 20);

function executorJvmPanel(id) {
    return {
	title: "Executor " + id + " Memory usage",
	type: "graphite",
	datasource: 'influxdb',
	span: 3,
        legend: {show: false},
	targets:[
          {
              select:[[
                  {'type': 'field', 'params': ['pools_Code-Cache_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Code Cache"
          },
      {
              select:[[
                  {'type': 'field', 'params': ['pools_Compressed-Class-Space_usage']},
                  {'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Compressed Class Space"
          },
      {
              select:[[
                  {'type': 'field', 'params': ['pools_Metaspace_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Metaspace"
          },
	        {
              select:[[
                  {'type': 'field', 'params': ['pools_PS-Eden-Space_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Ps Eden Space"
          },
      {
              select:[[
                  {'type': 'field', 'params': ['pools_PS-Old-Gen_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Ps Old Gen"
          },
      {
              select:[[
                  {'type': 'field', 'params': ['pools_PS-Survivor-Space_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Ps Survivor Space"
          },
	  {
              select:[[
                  {'type': 'field', 'params': ['heap_usage']},{'type': 'mean', 'params': []}
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=","value":id.toString()}
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['none']}],
              measurement: 'spark',
          alias:"Heap"
          },
	]

    }
}

for (var executorId = 1; executorId <= maxExecutorId; ++executorId) {
    executor_row.panels.push(executorJvmPanel(executorId));
}

var driver_row = {
    title: "Driver JVM / GC",
  height: "300px",
  editable: true,
  collapse: false,
  panels: [
      {
      title: "Driver scavenge GC",
      type: "graphite",
          datasource: 'influxdb',
      span: 4,
      targets:[
          {
            "select":[[
                {'type':'field','params':['PS-Scavenge_count']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/"  }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"GC count",
          },
          {
            "select":[[
                {'type':'field','params':['PS-Scavenge_time']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"GC time",
          },
      ]
      },
      {
	  title: "Driver JVM Memory",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 4,
	  targets:[
	  {
            "select":[[
                {'type':'field','params':['pools_Code-Cache_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"Code Cache"
      },
      {
            "select":[[
                {'type':'field','params':['pools_Compressed-Class-Space_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
          alias:"Compressed Class Space"
          },
	  {
            "select":[[
                {'type':'field','params':['pools_Metaspace_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"Metaspace"
          },
      {
            "select":[[
                {'type':'field','params':['pools_PS-Eden-Gen_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"Ps Eden Space"
          },
      {
            "select":[[
                {'type':'field','params':['pools_PS-Old-Gen_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"Ps Old Gen"
          },
	  {
            "select":[[
                {'type':'field','params':['pools_PS-Survivor-Space_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
          alias:"Ps Survivor Space"
          },
      {
            "select":[[
                {'type':'field','params':['heap_usage']},
                {'type':'mean','params':[]}
            ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
            groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
            measurement: 'spark',
            alias:"Heap"
          },

	  ]
      },
      {
	  title: "Driver GC Time per seconds",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 4,
	  targets:[
	   {
              select:[[
                  {'type':'field','params':['PS-Scavenge_time']},
                  {'type':'mean','params':[]},
                  {'type': 'non_negative_derivative', 'params': ['1s']},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "condition":"AND","key":"service","operator":"=~","value":"/^$driver$/" }
            ],
              groupBy: [{type: 'time', params: ['1s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"GC time"
          }
	  ]
      },

  ]
};

var hdfs_row = {
    title: "HDFS I/O",
    height: "300px",
    editable: true,
    collapse: false,
    panels: [
	{
	  title: "HDFS reads/s, 10s avgs",
	  type: "graphite",
          datasource: 'influxdb',
	  stack: true,
	  span: 3,
	  steppedLine: true,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_read_ops']},
                  {'type': 'mean', 'params': []},
                  {'type': 'non_negative_derivative', 'params': ['10s']},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
      {
	  title: "HDFS reads/executor",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_read_ops']},
                  {'type': 'mean', 'params': []},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=~","value":"/[0-9]+/"}
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
	{
	  title: "HDFS bytes reads/s, 10s avgs",
	  type: "graphite",
          datasource: 'influxdb',
	  stack: true,
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_read_bytes']},
                  {'type': 'mean', 'params': []},
                  {'type': 'non_negative_derivative', 'params': ['10s']},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
      {
	  title: "HDFS byte reads/executor",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_read_bytes']},
                  {'type': 'mean', 'params': []},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=~","value":"/[0-9]+/"}
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
      {
	  title: "HDFS writes/s, 10s avgs",
	  type: "graphite",
          datasource: 'influxdb',
	  stack: true,
	  span: 3,
	  steppedLine: true,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_write_ops']},
                  {'type': 'mean', 'params': []},
                  {'type': 'non_negative_derivative', 'params': ['10s']},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
      {
	  title: "HDFS writes/executor",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_write_ops']},
                  {'type': 'mean', 'params': []},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=~","value":"/[0-9]+/"}
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
	{
	  title: "HDFS bytes writes/s, 10s avgs",
	  type: "graphite",
          datasource: 'influxdb',
	  stack: true,
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_write_bytes']},
                  {'type': 'mean', 'params': []},
                  {'type': 'non_negative_derivative', 'params': ['10s']},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
      {
	  title: "HDFS byte writes/executor",
	  type: "graphite",
          datasource: 'influxdb',
	  span: 3,
	  targets:[
	  {
              select:[[
                  {'type': 'field', 'params': ['filesystem_hdfs_write_bytes']},
                  {'type': 'mean', 'params': []},
              ]],
            "tags":[
              { "key":"appid","operator":"=~","value":"/^$prefix$/" },
              { "key":"service","operator":"=~","value":"/[0-9]+/"}
            ],
              groupBy: [{type: 'time', params: ['10s']},{type: 'fill', params: ['null']}],
              measurement: 'spark',
          alias:"$m"
          },
	  ]
      },
    ]
};
// The dashboard, with its rows.
dashboard.rows = [
    threadpool_row,
    hdfs_row,
    driver_row,
    executor_row,
];

return dashboard;
